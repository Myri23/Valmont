{% extends 'base.html.twig' %}

{% block title %}Liste des Parkings Intelligents{% endblock %}

{% block body %}
<div class="container mt-4">
    <h1 class="mb-4">Gestion des Parkings Intelligents</h1>
    <p class="lead">Consultez et gérez les places disponibles dans vos parkings connectés.</p>

    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h2 class="h5 mb-0">Liste des parkings intelligents</h2>
        </div>
        <div class="card-body">
            {% if parkings is empty %}
                <p class="text-muted text-center">Aucun parking intelligent enregistré.</p>
            {% else %}
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Nom</th>
                                <th>Localisation</th>
                                <th>Places disponibles</th>
                                <th>Places totales</th>
                                <th>État</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for parking in parkings %}
                                <tr data-parking-id="{{ parking.id }}">
                                    <td>{{ parking.objet.idUnique }}</td>
                                    <td>{{ parking.objet.nom }}</td>
                                    <td>{{ parking.localisationPrecise }}</td>
                                    <td class="places-disponibles">
                                        <span class="badge {% if parking.placesDisponibles > 5 %}bg-success{% elseif parking.placesDisponibles > 0 %}bg-warning{% else %}bg-danger{% endif %}">
                                            {{ parking.placesDisponibles }}
                                        </span>
                                    </td>
                                    <td>{{ parking.placesTotales }}</td>
                                    <td>
                                        <span class="badge {% if parking.objet.etat == 'Actif' %}bg-success{% elseif parking.objet.etat == 'Maintenance' %}bg-warning{% else %}bg-danger{% endif %}">
                                            {{ parking.objet.etat }}
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-sm btn-primary reserver-place" 
                                                    data-parking-id="{{ parking.id }}" 
                                                    data-parking-nom="{{ parking.objet.nom }}"
                                                    {% if parking.placesDisponibles <= 0 %}disabled{% endif %}>
                                                Réserver une place
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% endif %}
        </div>
    </div>

    <!-- Historique des réservations -->
    <div class="card">
        <div class="card-header bg-secondary text-white">
            <h2 class="h5 mb-0">Historique des réservations</h2>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped" id="reservations-table">
                    <thead>
                        <tr>
                            <th>Parking</th>
                            <th>Places réservées</th>
                            <th>Date de réservation</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="reservations-body">
                        {% if reservations is defined and reservations is not empty %}
                            {% for reservation in reservations %}
                                <tr data-reservation-id="{{ reservation.id }}" data-parking-id="{{ reservation.parking.id }}">
                                    <td>{{ reservation.parking.objet.nom }}</td>
                                    <td>1</td>
                                    <td>{{ reservation.dateReservation|date('d/m/Y H:i') }}</td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-danger annuler-reservation"
                                                data-reservation-id="{{ reservation.id }}"
                                                data-parking-id="{{ reservation.parking.id }}">
                                            Annuler la réservation
                                        </button>
                                    </td>
                                </tr>
                            {% endfor %}
                        {% else %}
                            <tr id="no-reservations-row">
                                <td colspan="4" class="text-center text-muted">Aucune réservation en cours.</td>
                            </tr>
                        {% endif %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <a href="{{ path('app_objets_select_type') }}" class="btn btn-primary">Retour</a>
    </div>
</div>

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Tableau temporaire pour stocker les réservations en cours de session
        // (Normalement, ces données seraient persistées en base de données)
        let sessionReservations = [];
        
        // Gérer la réservation d'une place
        document.querySelectorAll('.reserver-place').forEach(button => {
            button.addEventListener('click', function() {
                const parkingId = this.getAttribute('data-parking-id');
                const parkingNom = this.getAttribute('data-parking-nom');
                const parkingRow = this.closest('tr');
                
                // Récupérer la cellule des places disponibles
                const placesCell = parkingRow.querySelector('.places-disponibles .badge');
                let places = parseInt(placesCell.textContent);
                
                // Vérifier si des places sont disponibles
                if (places <= 0) {
                    alert('Aucune place disponible !');
                    return;
                }
                
                // Décrémenter le nombre de places
                places--;
                placesCell.textContent = places;
                
                // Mettre à jour la couleur du badge
                if (places <= 0) {
                    placesCell.className = "badge bg-danger";
                    button.disabled = true;
                } else if (places <= 5) {
                    placesCell.className = "badge bg-warning";
                }
                
                // Créer une nouvelle réservation en mémoire
                const reservationId = 'temp-' + Date.now();
                const now = new Date();
                const dateStr = now.toLocaleDateString() + ' ' + now.toLocaleTimeString();
                
                // Ajouter la réservation à notre tableau temporaire
                sessionReservations.push({
                    id: reservationId,
                    parkingId: parkingId,
                    parkingNom: parkingNom,
                    date: dateStr
                });
                
                // Ajouter la réservation à l'historique
                const reservationsBody = document.getElementById('reservations-body');
                const noReservationsRow = document.getElementById('no-reservations-row');
                
                if (noReservationsRow) {
                    noReservationsRow.remove();
                }
                
                const newRow = document.createElement('tr');
                newRow.setAttribute('data-reservation-id', reservationId);
                newRow.setAttribute('data-parking-id', parkingId);
                
                newRow.innerHTML = `
                    <td>${parkingNom}</td>
                    <td>1</td>
                    <td>${dateStr}</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-danger annuler-reservation"
                                data-reservation-id="${reservationId}"
                                data-parking-id="${parkingId}">
                            Annuler la réservation
                        </button>
                    </td>
                `;
                
                reservationsBody.prepend(newRow);
                
                // Ajouter l'event listener au nouveau bouton d'annulation
                const newCancelButton = newRow.querySelector('.annuler-reservation');
                addCancelListener(newCancelButton);
                
                alert('Place réservée avec succès !');
            });
        });
        
        // Fonction pour ajouter un listener aux boutons d'annulation
        function addCancelListener(button) {
            button.addEventListener('click', function() {
                const reservationId = this.getAttribute('data-reservation-id');
                const parkingId = this.getAttribute('data-parking-id');
                const reservationRow = this.closest('tr');
                
                // Trouver le parking correspondant et incrémenter ses places
                document.querySelectorAll('tr[data-parking-id="' + parkingId + '"]').forEach(row => {
                    if (!row.querySelector('.places-disponibles')) return; // Ignorer les lignes qui ne sont pas des parkings
                    
                    const placesCell = row.querySelector('.places-disponibles .badge');
                    let places = parseInt(placesCell.textContent);
                    places++;
                    placesCell.textContent = places;
                    
                    // Mettre à jour la couleur du badge et le bouton
                    const reserveButton = row.querySelector('.reserver-place');
                    if (places > 5) {
                        placesCell.className = "badge bg-success";
                    } else if (places > 0) {
                        placesCell.className = "badge bg-warning";
                    }
                    
                    if (reserveButton && places > 0) {
                        reserveButton.disabled = false;
                    }
                });
                
                // Supprimer la réservation du tableau temporaire
                sessionReservations = sessionReservations.filter(r => r.id !== reservationId);
                
                // Supprimer la ligne de réservation
                reservationRow.remove();
                
                // Si plus de réservations, afficher le message "Aucune réservation"
                const reservationsBody = document.getElementById('reservations-body');
                if (reservationsBody.children.length === 0) {
                    const noReservationsRow = document.createElement('tr');
                    noReservationsRow.id = 'no-reservations-row';
                    noReservationsRow.innerHTML = '<td colspan="4" class="text-center text-muted">Aucune réservation en cours.</td>';
                    reservationsBody.appendChild(noReservationsRow);
                }
                
                alert('Réservation annulée avec succès !');
            });
        }
        
        // Ajouter des listeners aux boutons d'annulation existants
        document.querySelectorAll('.annuler-reservation').forEach(button => {
            addCancelListener(button);
        });
    });
</script>
{% endblock %}
{% endblock %}
