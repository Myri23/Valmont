security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Utilisateur:
            algorithm: auto
    
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # utilisé pour recharger l'utilisateur depuis la session & autres fonctionnalités
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur
                property: login  # Utilisez "email" si vous vous connectez avec l'email
        
        # gardez le provider par défaut pour ne pas casser d'autres configurations
        users_in_memory: { memory: null }
    
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        main:
            lazy: true
            provider: app_user_provider  # Utilise votre entité Utilisateur
            
            # configuration de la connexion par formulaire
            form_login:
                login_path: connexion       # Route vers votre page de connexion
                check_path: connexion_check # Route qui traite le formulaire de connexion
                username_parameter: utilisateur[login]  # Nom du champ login dans votre formulaire
                password_parameter: utilisateur[mot_de_passe]  # Nom du champ mot de passe
                default_target_path: home   # Page après connexion réussie
            
            # configuration de la déconnexion
            logout:
                path: deconnexion           # Route pour se déconnecter
                target: home                # Page après déconnexion
            
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall
            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/connexion, roles: PUBLIC_ACCESS }  # Permet l'accès à la page de connexion
        - { path: ^/objets, roles: ROLE_USER }         # Protège la route /objets
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
    
    # Configure la hiérarchie des rôles (optionnel)
    role_hierarchy:
        ROLE_INTERMEDIAIRE: [ROLE_USER]
        ROLE_AVANCE:        [ROLE_INTERMEDIAIRE]
        ROLE_EXPERT:        [ROLE_AVANCE]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon